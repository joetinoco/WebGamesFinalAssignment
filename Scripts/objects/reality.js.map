{"version":3,"sources":["objects/reality.ts"],"names":[],"mappings":"AAAA,IAAO,OAAO,CA2Db;AA3DD,WAAO,OAAO,EAAC,CAAC;IACZ;QAMI;YAEI,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,eAAe,EAAE,CAAC;QAC3B,CAAC;QAED,+BAAa,GAAb;YACI,uCAAuC;YACvC,yCAAyC;YACzC,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAEvC,oCAAoC;YACpC,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC;QAED,oCAAkB,GAAlB;YACI,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC;QAC7C,CAAC;QAED,mCAAiB,GAAjB;YACI,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC;YACvC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc;QACzE,CAAC;QAED,iCAAe,GAAf;YACI,6CAA6C;YAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;YACzC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC5C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,6BAA6B;YAC/D,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACrF,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,6BAA6B;QAC3D,CAAC;QAED,kCAAgB,GAAhB;YACI,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YACnC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvC,CAAC;QAED,wBAAM,GAAN;YACI,KAAK,CAAC,IAAI,CACN,CAAC,GAAG,EAAE,CAAG,YAAY;cACnB,EAAE,CAAO,qBAAqB;cAC9B,EAAE,CAAO,qBAAqB;aACnC,CAAC;YACF,KAAK,CAAC,aAAa,EAAE,CAAC;YACtB,KAAK,CAAC,WAAW,EAAE,CAAC;QACxB,CAAC;QACL,cAAC;IAAD,CAzDA,AAyDC,IAAA;IAzDY,eAAO,UAyDnB,CAAA;AACL,CAAC,EA3DM,OAAO,KAAP,OAAO,QA2Db","file":"objects/reality.js","sourcesContent":["module objects {\r\n    export class Reality {\r\n        gravity: Box2D.Common.Math.b2Vec2;\r\n        debugContext;\r\n        arcadeCanvas;\r\n        debugCanvas;\r\n        debugDraw: Box2D.Dynamics.b2DebugDraw;\r\n        constructor() {\r\n\r\n            this.createPhysics();\r\n            this.createArcadeCanvas();\r\n            this.createDebugCanvas();\r\n            this.createDebugDraw();\r\n        }\r\n\r\n        createPhysics() {\r\n            // Adds gravity to world, no horizontal\r\n            // gravity, but 50 pixel vertical gravity\r\n            this.gravity = new box2d.b2Vec2(0, 50);\r\n\r\n            // Creates our Box2D World.CREATION!\r\n            world = new box2d.b2World(this.gravity, true);\r\n        }\r\n\r\n        createArcadeCanvas() {\r\n            this.arcadeCanvas = config.ARCADE_CANVAS;\r\n        }\r\n\r\n        createDebugCanvas() {\r\n            this.debugCanvas = config.DEBUG_CANVAS;\r\n            this.debugContext = this.debugCanvas.getContext(\"2d\"); // set context\r\n        }\r\n\r\n        createDebugDraw() {\r\n            // This is what our box2d bodies get drawn to\r\n            this.debugDraw = new box2d.b2DebugDraw();\r\n            this.debugDraw.SetSprite(this.debugContext);\r\n            this.debugDraw.SetDrawScale(config.Screen.SCALE);\r\n            this.debugDraw.SetFillAlpha(0.7); // Set the Opacity of objects\r\n            this.debugDraw.SetLineThickness(1.0);\r\n            this.debugDraw.SetFlags(box2d.b2DebugDraw.e_shapeBit | box2d.b2DebugDraw.e_jointBit);\r\n            world.SetDebugDraw(null); // Set world's draw container\r\n        }\r\n\r\n        enableDebugLayer() {\r\n            console.log('Debug layer enabled');\r\n            world.SetDebugDraw(this.debugDraw);\r\n        }\r\n\r\n        update() {\r\n            world.Step(\r\n                1 / 60   //frame-rate\r\n                , 10       //velocity iterations\r\n                , 10       //position iterations\r\n            );\r\n            world.DrawDebugData();\r\n            world.ClearForces();\r\n        }\r\n    }\r\n} "],"sourceRoot":"/source/"}